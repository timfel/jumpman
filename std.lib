#importonce

.filenamespace std

/* CIA1 */
.label CIA1               = $DC00
.label CIA1_DATA_PORT_A   = CIA1 + $00
.label CIA1_DATA_PORT_B   = CIA1 + $01
.label CIA1_DATA_DIR_A    = CIA1 + $02
.label CIA1_DATA_DIR_B    = CIA1 + $03
.label CIA1_TIMER_A_LO    = CIA1 + $04
.label CIA1_TIMER_A_HI    = CIA1 + $05
.label CIA1_TIMER_B_LO    = CIA1 + $06
.label CIA1_TIMER_B_HI    = CIA1 + $07
.label CIA1_TOD_SEC10     = CIA1 + $08
.label CIA1_TOD_SEC       = CIA1 + $09
.label CIA1_TOD_MIN       = CIA1 + $0A
.label CIA1_TOD_HOUR      = CIA1 + $0B
.label CIA1_IO_BUFFER     = CIA1 + $0C
.label CIA1_IRQ_CONTROL   = CIA1 + $0D
.label CIA1_CONTROL_A     = CIA1 + $0E
.label CIA1_CONTROL_B     = CIA1 + $0F

/* CIA2 */
.label CIA2               = $DD00
.label CIA2_DATA_PORT_A   = CIA2 + $00
.label CIA2_DATA_PORT_B   = CIA2 + $01
.label CIA2_DATA_DIR_A    = CIA2 + $02
.label CIA2_DATA_DIR_B    = CIA2 + $03
.label CIA2_TIMER_A_LO    = CIA2 + $04
.label CIA2_TIMER_A_HI    = CIA2 + $05
.label CIA2_TIMER_B_LO    = CIA2 + $06
.label CIA2_TIMER_B_HI    = CIA2 + $07
.label CIA2_TOD_SEC10     = CIA2 + $08
.label CIA2_TOD_SEC       = CIA2 + $09
.label CIA2_TOD_MIN       = CIA2 + $0A
.label CIA2_TOD_HOUR      = CIA2 + $0B
.label CIA2_IO_BUFFER     = CIA2 + $0C
.label CIA2_IRQ_CONTROL   = CIA2 + $0D
.label CIA2_CONTROL_A     = CIA2 + $0E
.label CIA2_CONTROL_B     = CIA2 + $0F

/* Joystick flags */
.label JOY_UP           = %00001
.label JOY_DOWN         = %00010
.label JOY_LEFT         = %00100
.label JOY_RIGHT        = %01000
.label JOY_FIRE         = %10000

/* VIC-II memory banks */
.label BANK_0           = %00000011
.label BANK_1           = %00000010
.label BANK_2           = %00000001
.label BANK_3           = %00000000

.label VIC2                 = $D000
.label SPRITE_0_X           = VIC2 + $00
.label SPRITE_0_Y           = VIC2 + $01
.label SPRITE_1_X           = VIC2 + $02
.label SPRITE_1_Y           = VIC2 + $03
.label SPRITE_2_X           = VIC2 + $04
.label SPRITE_2_Y           = VIC2 + $05
.label SPRITE_3_X           = VIC2 + $06
.label SPRITE_3_Y           = VIC2 + $07
.label SPRITE_4_X           = VIC2 + $08
.label SPRITE_4_Y           = VIC2 + $09
.label SPRITE_5_X           = VIC2 + $0A
.label SPRITE_5_Y           = VIC2 + $0B
.label SPRITE_6_X           = VIC2 + $0C
.label SPRITE_6_Y           = VIC2 + $0D
.label SPRITE_7_X           = VIC2 + $0E
.label SPRITE_7_Y           = VIC2 + $0F
.label SPRITE_MSB_X         = VIC2 + $10
.label CONTROL_1            = VIC2 + $11
.label RASTER               = VIC2 + $12
.label LIGHTPEN_X           = VIC2 + $13
.label LIGHTPEN_Y           = VIC2 + $14
.label SPRITE_ENABLE        = VIC2 + $15
.label CONTROL_2            = VIC2 + $16
.label SPRITE_EXPAND_Y      = VIC2 + $17
.label MEMORY_CONTROL       = VIC2 + $18
.label IRR                  = VIC2 + $19
.label IMR                  = VIC2 + $1A
.label SPRITE_PRIORITY      = VIC2 + $1B
.label SPRITE_COL_MODE      = VIC2 + $1C
.label SPRITE_EXPAND_X      = VIC2 + $1D
.label SPRITE_2S_COLLISION  = VIC2 + $1E
.label SPRITE_2B_COLLISION  = VIC2 + $1F
.label BORDER_COL           = VIC2 + $20
.label BG_COL_0             = VIC2 + $21
.label BG_COL_1             = VIC2 + $22
.label BG_COL_2             = VIC2 + $23
.label BG_COL_3             = VIC2 + $24
.label SPRITE_COL_0         = VIC2 + $25
.label SPRITE_COL_1         = VIC2 + $26
.label SPRITE_0_COLOR       = VIC2 + $27
.label SPRITE_1_COLOR       = VIC2 + $28
.label SPRITE_2_COLOR       = VIC2 + $29
.label SPRITE_3_COLOR       = VIC2 + $2A
.label SPRITE_4_COLOR       = VIC2 + $2B
.label SPRITE_5_COLOR       = VIC2 + $2C
.label SPRITE_6_COLOR       = VIC2 + $2D
.label SPRITE_7_COLOR       = VIC2 + $2E

.label COLOR_RAM            = $D800
.label TOP_SCREEN_RASTER_POS = 50

.label RASTER_MAX_PAL       = 312
.label RASTER_MAX_NTSC      = 263

/* ------------------------------------
 * CONTROL_1 bits
 * ------------------------------------ */
.label CONTROL_1_RASTER8  = %10000000
.label CONTROL_1_ECM      = %01000000
.label CONTROL_1_BMM      = %00100000
.label CONTROL_1_DEN      = %00010000
.label CONTROL_1_RSEL     = %00001000

/* ------------------------------------
 * CONTROL_2 bits
 * ------------------------------------ */
.label CONTROL_2_RES      = %00100000
.label CONTROL_2_MCM      = %00010000
.label CONTROL_2_CSEL     = %00001000

/* ------------------------------------
 * IRR bits
 * ------------------------------------ */
.label IRR_IRQ            = %10000000
.label IRR_LIGHTPEN       = %00001000
.label IRR_SPR_SPR        = %00000100
.label IRR_SPR_BG         = %00000010
.label IRR_RASTER         = %00000001

/* ------------------------------------
 * IMR bits
 * ------------------------------------ */
.label IMR_LIGHTPEN       = %00001000
.label IMR_SPR_SPR        = %00000100
.label IMR_SPR_BG         = %00000010
.label IMR_RASTER         = %00000001

/* ------------------------------------
 * Graphic modes
 * ------------------------------------ */
.label STANDARD_TEXT_MODE     = %000
.label MULTICOLOR_TEXT_MODE   = %001
.label STANDARD_BITMAP_MODE   = %010
.label MULTICOLOR_BITMAP_MODE = %011
.label EXTENDED_TEXT_MODE     = %100

.label MODE_ECM               = %100
.label MODE_BMM               = %010
.label MODE_MCM               = %001

/* ------------------------------------
 * Misc. constants
 */
.label TEXT_SCREEN_WIDTH = 40

/*
 * MOS6510 Registers.
 */
.label MOS_6510_DIRECTION       = $00
.label MOS_6510_IO              = $01

/*
 * I/O Register bits.
 */
.label CASETTE_MOTOR_OFF        = %00100000
.label CASETTE_SWITCH_CLOSED    = %00010000
.label CASETTE_DATA             = %00001000
.label PLA_CHAREN               = %00000100
.label PLA_HIRAM                = %00000010
.label PLA_LORAM                = %00000001

/*
 * Possible I/O & PLA configurations.
 */
.label RAM_RAM_RAM              = %000
.label RAM_CHAR_RAM             = PLA_LORAM
.label RAM_CHAR_KERNAL          = PLA_HIRAM
.label BASIC_CHAR_KERNAL        = PLA_LORAM | PLA_HIRAM
.label RAM_IO_RAM               = PLA_CHAREN | PLA_LORAM
.label RAM_IO_KERNAL            = PLA_CHAREN | PLA_HIRAM
.label BASIC_IO_KERNAL          = PLA_CHAREN | PLA_LORAM | PLA_HIRAM


.label color_ram = $d800
.label border_color = $d020
.label bg_color = $d021
.label screen_control_register1 = $d011
.label screen_control_register2 = $d016
.label memory_setup_register = $d018

.namespace sprites {
    .label positions = VIC2
    .label position_x_high_bits = VIC2 + 16
    .label enable_bits = VIC2 + 21
    .label colors = VIC2 + 39
    .label vertical_stretch_bits = VIC2 + 23
    .label horizontal_stretch_bits = VIC2 + 29
    .label pointers = 1024 - 8
    .label multicolor_bits = VIC2 + 28
    .label color1 = VIC2 + 37
    .label color2 = VIC2 + 38
}

.macro @hires_mode(flag) {
    .if (flag == 1) {
        lda screen_control_register1
        ora #%00100000
        and #%10111111
        sta screen_control_register1
    } else {
        lda screen_control_register1
        and #%11011111
        ora #%01000000
        sta screen_control_register1
    }
}

.macro @multicolor_mode(flag) {
    .if (flag == 1) {
        lda screen_control_register1
        ora #%00010000
        sta screen_control_register2
    } else {
        lda screen_control_register2
        and #%11101111
        sta screen_control_register2
    }
}

.macro @set_screen_memory(index) {
    .assert "index must be 0 - 15", index >= 1 && index < 16, true
    lda memory_setup_register
    and #%00001111
    ora #[index << 4]
    sta memory_setup_register
}

.function @get_screen_memory(bank, index) {
    .assert "screen index 0 - 15", index >= 0 && index <= 15, true
    .return $0400 * index + get_vic_bank(bank)
}

.macro @set_sprite_memory(vic_bank, screen_index, sprite_index, memory_index) {
    .assert "sprite 0 - 7", sprite_index >= 0 && sprite_index <= 7, true
    .assert "max 256 sprites per bank", memory_index >= 0 && memory_index <= 255, true
    .var memory = 64 * memory_index
    .assert "memory must fit in 16k, because that's all the VIC2 can see", memory < $4000, true
    lda #memory
    sta get_screen_memory(vic_bank, screen_index) + sprites.pointers + sprite_index
}

.function @get_sprite_memory(vic_bank, index) {
    .assert "max 256 sprites per bank", index >= 0 && index <= 255, true
    .return 64 * index + get_vic_bank(vic_bank)
}

.macro @set_bitmap_memory(index) {
    lda memory_setup_register
    and #%11110111
    ora #[index << 3]
    sta memory_setup_register
}

.function @get_bitmap_memory(bank, index) {
    .return $2000 * index + get_vic_bank(bank)
}

.function @get_vic_bank(bank) {
    .assert "bank can be 0 - 3", bank >= 0 && bank <= 3, true
    .return $4000 * bank
}

/* bank 0 - 4 */
.macro @set_vic_bank(bank) {
    .assert "bank can be 0 - 3", bank >= 0 && bank <= 3, true
    .var vic_bank = bank ^ %00000011    // vicbank selection is reverse
    lda CIA2_DATA_PORT_A
    and #%1111100
    ora #vic_bank
    sta CIA2_DATA_PORT_A
}

.macro @configureMemory(config) {
    lda MOS_6510_IO
    and #%11111000
    ora #[config & %00000111]
    sta MOS_6510_IO
}

.macro @set_background_color(color) {
    lda #color
    sta bg_color
}
